type User {
  name: String!
  email: String!
  id: ID!
  personalBoardId: Int
}

type Team {
  name: String!
  id: ID!
  adminId: Int!
  cards: [Card!]!
  teamMembers: [User!]!
}

enum Status {
  Open
  Done
  In_progress
}

type CardRaw {
  title: String!
  id: ID!
  assigneeId: Int!
  createdAt: String!
  dueDateTime: String!
  teamId: Int!
  status: Status!
}

type Card {
  title: String!
  id: ID!
  assigneeId: Int!
  createdAt: String!
  dueDateTime: String!
  teamId: Int!
  status: Status!
  assignee: User!
  team: Team!
}

type Query {
  me: User!
  users: [User!]!
  user(id: Int!): User
  teams: [Team!]!
  team(id: Int!): Team
  teamMembers(id: Int!): [User!]!
  cards(input: CardsFilterInput): [Card!]!
  userCards: [Card!]!
  card(id: String!): Card
  today: [Card]!
}

type Mutation {
  addTeam(input: AddTeamInput!): Team!
  signup(input: SignupInput): String!
  login(input: LoginInput): String!
  addTeamMember(input: AddTeamMemberInput!): String!
  addCard(input: AddCardInput!): String!
}

input AddTeamInput {
  name: String!
}

input SignupInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input AddTeamMemberInput {
  email: String!
  teamId: Int!
}

input AddCardInput {
  title: String!
  assigneeId: Int!
  dueDateTime: String!
  teamId: Int!
}

input CardsFilterInput {
  timestamp: String
}
